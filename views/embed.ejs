<!DOCTYPE html>
<html lang="en">

<head>
    <title>Embed - <%= title %>
    </title>
    <meta name="description"
        content="Yasifys is a free online tool for downloading videos from popular video sharing websites, including YouTube, TikTok, Facebook, and more." />
    <meta name="keywords" content="YouTube downloader, TikTok downloader, Facebook downloader, video downloader" />
    <link rel="canonical" href="https://www.yasifys.tk/player" />
    <meta property="og:title" content="Embed - <%= title %>" />
    <meta property="og:description"
        content="Yasifys is a free online tool for downloading videos from popular video sharing websites, including YouTube, TikTok, Facebook, and more." />
    <meta property="og:type" content="website" />
    <meta property="og:url" content="https://www.yasifys.tk/player" />
    <meta property="og:image" content="https://www.yasifys.tk/assets/img/meta/Card.png" />
    <meta property="og:image:alt" content="Yasifys logo" />
    <meta property="og:site_name" content="Yasifys" />
    <meta name="twitter:card" content="summary" />
    <meta name="twitter:title" content="About - Yasifys YouTube Downloader" />
    <meta name="twitter:description"
        content="Yasifys is a free online tool for downloading videos from popular video sharing websites, including YouTube, TikTok, Facebook, and more." />
    <meta name="twitter:image" content="https://www.yasifys.tk/assets/img/meta/Card.png" />
    <meta name="twitter:image:alt" content="Yasifys logo" />

    <link rel="icon" type="image/png" href="/favicon/favicon32x32.png" />

    <link rel="icon" type="image/x-icon" href="/favicon/favicon.ico" />

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/css/bootstrap.min.css" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/css/bootstrap.min.css" />
    <link id="page-stylesheet" rel="stylesheet" href="/style.css" />
    <link id="videoplayer-stylesheet" rel="stylesheet" href="/videoplayer.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">
    <link rel="stylesheet"
        href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"
        integrity="sha512-iecdLmaskl7CVkqkXNQ/ZH/XLlvWZOJyj7Yy7tcenmpD1ypASozpmT/E0iPtmFIB46ZmdtAc9eNBvH0H/ZpiBw=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />

    <% if (matomo) { %>
        <!-- Matomo -->
        <script>
            var _paq = (window._paq = window._paq || []);
            /* tracker methods like "setCustomDimension" should be called before "trackPageView" */
            _paq.push(["trackPageView"]);
            _paq.push(["enableLinkTracking"]);
            (function () {
                var u = "<%- matomo.URL %>";
                if (u.substr(-1) !== "/") {
                    u += "/";
                }
                _paq.push(["setTrackerUrl", u + "matomo.php"]);
                _paq.push(["setSiteId", "<%- matomo.SITE_ID %>"]);
                var d = document,
                    g = d.createElement("script"),
                    s = d.getElementsByTagName("script")[0];
                g.async = true;
                g.src = u + "matomo.js";
                s.parentNode.insertBefore(g, s);
            })();
        </script>
        <!-- End Matomo Code -->
        <% } %>
</head>

<body>

    <div class="containers show-controls fullscreen">
        <div class="wrapper">
            <div class="video-timeline">
                <div class="progress-area">
                    <span>00:00</span>
                    <div class="progress-bar"></div>
                </div>
            </div>
            <ul class="video-controls">
                <li class="options left">
                    <button class="volume"><i class="fa-solid fa-volume-high"></i></button>
                    <input type="range" min="0" max="1" step="any">
                    <div class="video-timer">
                        <p class="current-time">00:00</p>
                        <p class="separator"> / </p>
                        <p class="video-duration">00:00</p>
                    </div>
                </li>
                <li class="options center">
                    <button class="skip-backward"><i class="fas fa-backward"></i></button>
                    <button class="play-pause"><i class="fas fa-play"></i></button>
                    <button class="skip-forward"><i class="fas fa-forward"></i></button>
                </li>
                <li class="options right">
                    <button class="pic-in-pic"><span class="material-icons">picture_in_picture_alt</span></button>
                    <button class="fullscreen"><i class="fa-solid fa-expand"></i></button>
                </li>
            </ul>
        </div>
        <video src="<%= url %>"></video>
    </div>
    </div>
    </div>
    </div>

    <script src="script.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
        crossorigin="anonymous"></script>
    <script>

        // Calculate the end time based on the saved start time and 20 minutes
        const savedStartTime = localStorage.getItem("videoStartTime");
        const startTime = savedStartTime ? parseInt(savedStartTime) : new Date().getTime();
        const endTime = startTime + 20 * 60 * 1000;

        // Get the countdown element
        const countdownElement = document.getElementById("countdown");

        // Function to update the countdown
        function updateCountdown() {
            const now = new Date().getTime();
            const timeRemaining = endTime - now;
            const minutes = Math.floor(timeRemaining / 60000);
            const seconds = Math.floor((timeRemaining % 60000) / 1000);
            const formattedTime = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
            countdownElement.textContent = `Video will be deleted in: ${formattedTime}`;

            if (timeRemaining <= 0) {
                countdownElement.textContent = "Video has been deleted.";

                // Remove the saved start time from localStorage
                localStorage.removeItem("videoStartTime");

                clearInterval(countdownInterval);
            }
        }

        // Initial update of the countdown
        updateCountdown();

        // Update the countdown every second
        const countdownInterval = setInterval(updateCountdown, 1000);

        function toggleDarkMode() {
            const body = document.body;
            const darkModeButton = document.getElementById("darkModeToggle");

            // Toggle the dark-mode class on the body element
            body.classList.toggle('dark-mode');

            // Save the dark mode preference to localStorage
            if (body.classList.contains('dark-mode')) {
                localStorage.setItem('darkModePreference', 'dark');
                darkModeButton.innerHTML = "<i class='fas fa-sun'></i>";
            } else {
                localStorage.setItem('darkModePreference', 'light');
                darkModeButton.innerHTML = "<i class='fas fa-moon'></i>";
            }

            // Get all elements with class attribute
            const elementsWithClass = document.querySelectorAll('*[class]');

            // Loop through each element with class and toggle dark-mode
            elementsWithClass.forEach(element => {
                if (element !== body) {
                    element.classList.toggle('dark-mode');
                }
            });
        }

        // Check for dark mode preference on page load
        document.addEventListener('DOMContentLoaded', function () {
            const darkModePreference = localStorage.getItem('darkModePreference');
            const body = document.body;
            const darkModeButton = document.getElementById("darkModeToggle");
            const elementsWithClass = document.querySelectorAll('*[class]');

            if (darkModePreference === 'dark') {
                elementsWithClass.forEach(element => {
                    if (element !== body) {
                        element.classList.toggle('dark-mode');
                    }
                });
                body.classList.toggle('dark-mode');
                darkModeButton.innerHTML = "<i class='fas fa-sun'></i>";
            }

            if (darkModePreference === 'light') {
                elementsWithClass.forEach(element => {
                    if (element !== body) {
                        element.classList.toggle('light-mode');
                    }
                });
                body.classList.toggle('light-mode');
                darkModeButton.innerHTML = "<i class='fas fa-moon'></i>";
            }
        });

        const customStylesheet = localStorage.getItem('customStylesheet');
        if (customStylesheet) {
            const styleTag = document.createElement('style');
            styleTag.innerHTML = customStylesheet;
            document.head.appendChild(styleTag);
            document.getElementById('page-stylesheet').remove();
        }
    </script>
</body>

</html>
